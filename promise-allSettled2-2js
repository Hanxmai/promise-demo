/**
 * 实现一个allSettled2方法,接收两个promise数组，数组内的 promise 串行，两个数组并行
 */

Promise.allSettled2 = (promisesList) => {
  return new Promise((resolve, reject) => {
    let list = [];
    let sumPromise = promisesList.length;
    let sumIndex = 0;
    promisesList.forEach((promises, i) => {
      let promise = Promise.resolve();
      let array = [];
      let len = promises.length;
      // let index = 0;
      promises.forEach((p, j) => {
        promise = promise.then(() => Promise.resolve(p()).then((val) => {
          array[j] = {
            status: 'fulfilled',
            value: val
          }
          // index++;
          if(j === len-1) {
            list[i] = array
            sumIndex++;
          }
          if(sumIndex === sumPromise) resolve(list)
        }, (val) => {
          array[j] = {
            status: 'rejected',
            value: val
          }
          // index++;
          if(j === len-1) {
            list[i] = array
            sumIndex++;
          }
          if(sumIndex === sumPromise) resolve(list)
        }))
      })
    })   
  })
}





var resolvedPromisesArray = [
  [1, Promise.resolve(13), new Promise((resolve, reject) => {
    setTimeout(() => {
      resolve(14)
    }, 2000)
  }), Promise.reject(15), 16], [26,28]];


function delay(v, t) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      console.log(v, t)
      resolve(v)
    }, t)
  })
}

const list1 = [1,3,5,7,9].map(i => delay.bind(null, i, Math.random()*1000))
const list2 = [2,4,6,8,10].map(i => delay.bind(null, i, Math.random()*1000))
  


 Promise.allSettled2([list1, list2]).then((val) => {
  console.log("22", val)
})


